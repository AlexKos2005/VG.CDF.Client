@using BreadCommunityWeb.Blz.Application.Dto.Client;
@using Microsoft.Extensions.Localization

@page "/factory/{factoryid}/{name}"
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient

<h3>@Name</h3>

@if(@LanguageLabels.Any() == false)
{
    <MudInputLabel>@Localizer["Please, wait"].Value</MudInputLabel>
}
else
{
<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudSelect Label=@Localizer["Language"].Value T="string" Value="@CurrentLanguageLabel" TextChanged="((string tt)=> ChangeLanguageLabel(tt))">
            @foreach (var lang in LanguageLabels)
            {
                <MudSelectItem T="string" Value="@lang">@lang</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudDatePicker Label="Only Calendar" @bind-Date="@StartReportDate" DisableToolbar="true" HelperText=@Localizer["Start date of Report"].Value />
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudDatePicker Label="Only Calendar" @bind-Date="@EndReportDate" DisableToolbar="true" HelperText=@Localizer["End date of Report"].Value  />
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudFab Icon="@Icons.Material.Filled.Save" aria-label="save" OnClick="(()=>ReportDownload2())" Title=@Localizer["Get Report"].Value />
    </MudItem>
</MudGrid>
<br />

@foreach (var deviceTagParam in DevicesTagParams)
{
<MudGrid>
    <MudItem>
        <h3>@deviceTagParam.Device.DeviceDescriptions[0].Description</h3>
    </MudItem>
    <MudItem>
        <MudCheckBox CheckedChanged="((int rr)=>DropCheck(deviceTagParam.Device.ExternalId))" Color="MudBlazor.Color.Primary"></MudCheckBox>
    </MudItem>
</MudGrid>
 
    <table width="10%" cellspacing="0" border="1">
        <tr>
            @foreach (var tag in deviceTagParam.TagParams)
            {
                <th colspan="1" style="text-align:center">@tag.TagParamDescriptions.Where(c => c.LanguageExternalId == CurrentLanguageExternalId).FirstOrDefault().Description</th>
            }
        </tr>
        <tr>
            @foreach (var tag in deviceTagParam.TagParams)
            {
                <td style="text-align:center"><MudCheckBox @bind-Checked="@tag.IsEnabled" Color="MudBlazor.Color.Primary"></MudCheckBox></td>
            }
        </tr>

    </table>
    <br />
    <br />
}

@*@if(@TableData.ExcelSheets.Any())
    {
        int counter = 0;
        <table width="10%" cellspacing="0" border="1">
    <tr>
        @foreach(var collumns in @TableData.ExcelSheets[0].CollumnDatas)
        {
             <th colspan="1" style="text-align:center">@collumns.CollumnName</th>
        }
    </tr>

       @for(int i = 0;i<@TableData.ExcelSheets[0].CollumnDatas[0].Values.Count();i++)
            {
                 <tr>
                @foreach(var collumn in @TableData.ExcelSheets[0].CollumnDatas)
                {
                    
                     <th colspan="1" style="text-align:center">@collumn.Values[i]</th>
                }
               </tr>
            }
       
   

</table>  *@
    

}

@code {
    
    protected void CangeCheck1(DeviceWithDescriptionsDto deviceTagParamsResponseDto)
    {
        @foreach (var deviceTagParam in DevicesTagParams)
        {
            if (deviceTagParam.Device.ExternalId == deviceTagParamsResponseDto.ExternalId)
            {
                foreach (var tatParam in deviceTagParam.TagParams)
                {
                    tatParam.IsEnabled = false;
                }
            }
        }
    }

    //protected async Task ReportDownload()
    //{

    //    var response = await _httpClient.GetAsync("/api/report/getreport");

    //    response.EnsureSuccessStatusCode();

    //    var fileBytes = await response.Content.ReadAsByteArrayAsync();

    //    var fileName = "TestFile.xlsx";

    //    await _jsRuntime.InvokeAsync<object>("SaveAsFile", fileName, Convert.ToBase64String(fileBytes));
    //}

}
