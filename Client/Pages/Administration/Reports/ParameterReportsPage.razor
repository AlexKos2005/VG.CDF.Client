@page "/parameterreports/{companyid:guid}/{projectid:guid}/{projectdescription}"
@using VG.CDF.Client.Application.Interfaces.Services
@using VG.CDF.Client.Application.Enums
@using VG.CDF.Client.Application.Dto
@using VG.CDF.Client.Application.Dto.Reports
@using VG.CDF.Client.Application.ParameterDescriptions.Queries
@using VG.CDF.Client.Application.Parameters.Queries
@using VG.CDF.Client.Application.Processes.Queries

@inject IParameterService ParameterService
@inject IParameterDescriptionService ParameterDescriptionService
@inject IProcessService ProcessService
@inject IProcessDescriptionService ProcessDescriptionService
@inject IParameterReportService ParameterReportService

<div style="display: flex;margin: 0 -5px;">
    <div style=" flex: 1 1 auto;margin: 0 5px;">
        <MudSelect T="string" Value="@CurrentLanguageLabel" TextChanged ="@((string current)=>UpdateDescr(current))">
            @foreach (var name in Enum.GetNames(typeof(LanguageAcronyms)))
            {
                if (name != LanguageAcronyms.Eng.ToString())
                {
                    <MudSelectItem T="string" Value="@name">@name</MudSelectItem>
                }
            }
        </MudSelect>
    </div>
    <div style=" flex: 1 1 auto;margin: 0 5px;"><MudDatePicker Label="Only Calendar" @bind-Date="@StartReportDate" DisableToolbar="true" HelperText="Начальная дата отчета"/></div>
    <div style=" flex: 1 1 auto;margin: 0 5px;"><MudDatePicker Label="Only Calendar" @bind-Date="@EndReportDate" DisableToolbar="true" HelperText="Конечная дата отчета"/></div>
    <div style=" flex: 1 1 auto;margin: 0 5px;"><MudFab Icon="@Icons.Material.Filled.Save" aria-label="save" OnClick="(() => MakeReport())" Title="Сформировать отчет"/></div>

</div>
<MudDivider />

<MudExpansionPanels>
    @foreach (var process in ProcessParametersCheckBox.Keys)
    {
        @if (@ProcessParametersCheckBox.TryGetValue(process, out List<CheckedElementDto> list))
        {
            @if (list.Any())
            {
                <MudExpansionPanel Text="@process.CurrentDescr">
                    <MudCheckBox Checked="@process.IsChecked" T="bool" Color="MudBlazor.Color.Success" CheckedChanged="@(() => DropAllChecked(process.ElementId))">
                        Выбрать все
                    </MudCheckBox>
                    @if (@ProcessParametersCheckBox.TryGetValue(process, out List<CheckedElementDto> list))
                    {
                        <div style="-webkit-column-count: 7">
                            @foreach (var param in list.OrderBy(c => c.ElementExternalId))
                            {
                                <span style="white-space: nowrap;">
                                    <MudCheckBox Checked="@param.IsChecked" T="bool" Color="MudBlazor.Color.Primary" CheckedChanged="@(()=>DropChecked(process.ElementId,param.ElementId))">
                                        @param.CurrentDescr
                                    </MudCheckBox>
                                </span>
                                <br/>
                            }
                        </div>
                    }
                </MudExpansionPanel> 
            }
            else
            {
                <MudExpansionPanel Text="@process.CurrentDescr"></MudExpansionPanel>
            }
        }


    }
</MudExpansionPanels>

@code {
    
    [Parameter] public Guid ProjectId { get; set; }
    [Parameter] public string ProjectDescription { get; set; }
    [Parameter] public Guid CompanyId { get; set; }
    
    private IDictionary<CheckedElementDto, List<CheckedElementDto>> ProcessParametersCheckBox { get; set; } = new Dictionary<CheckedElementDto, List<CheckedElementDto>>();
    private IDictionary<Guid, List<ParameterDto>> ProcessParameters { get; set; } = new Dictionary<Guid, List<ParameterDto>>();
    private IEnumerable<ParameterDto> Parameters { get; set; } = new List<ParameterDto>();
    private IEnumerable<ParameterDescriptionDto> ParameterDescriptions { get; set; } = new List<ParameterDescriptionDto>();
    private IEnumerable<ProcessDto> Processes { get; set; } = new List<ProcessDto>();
    private IEnumerable<ProcessDescriptionDto> ProcessDescriptions { get; set; } = new List<ProcessDescriptionDto>();

    public string CurrentLanguageLabel { get; set; } = String.Empty;

    public DateTime? StartReportDate { get; set; } = DateTime.Now.AddDays(-1);
    
    public DateTime? EndReportDate { get; set; }= DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        Processes = await ProcessService
            .GetList<GetProcessesListQuery>(new GetProcessesListQuery() { ProjectId = ProjectId });
        
        ProcessDescriptions = await ProcessDescriptionService
            .GetList<GetParameterDescriptionsListQuery>(new GetParameterDescriptionsListQuery() { CompanyId = CompanyId});

        foreach (var process in Processes)
        {
            var parameters = await ParameterService
                .GetList<GetParametersListQuery>(new GetParametersListQuery() { ProcessId = process.Id });
            ProcessParameters.Add(process.Id,parameters.ToList());

            var checkedList = new List<CheckedElementDto>();
            foreach (var param in parameters.ToList())
            {
                checkedList.Add(new CheckedElementDto(){ElementId = param.Id,IsChecked = false,ElementExternalId = param.ExternalId});
            }


            ProcessParametersCheckBox.Add(new CheckedElementDto(){ElementId = process.Id,IsChecked = false,ElementExternalId = process.ExternalId},checkedList);
        }
            
        
        ParameterDescriptions = await ParameterDescriptionService
            .GetList<GetParameterDescriptionsListQuery>(new GetParameterDescriptionsListQuery() { CompanyId = CompanyId });
        
        UpdateDescr("");
        
        
    }

    private void DropAllChecked(Guid processId)
    {
        var keyCheckedElement = ProcessParametersCheckBox.Keys.FirstOrDefault(c => c.ElementId == processId);
        if (keyCheckedElement != null)
        {
            ProcessParametersCheckBox.TryGetValue(keyCheckedElement, out List<CheckedElementDto> list);

            foreach (var element in list)
            {
                element.IsChecked = keyCheckedElement.IsChecked != true;
            }
        }
        
        keyCheckedElement.IsChecked = keyCheckedElement.IsChecked != true;
    }
    
    private void DropChecked(Guid processId,Guid paramId)
    {
        var keyCheckedElement = ProcessParametersCheckBox.Keys.FirstOrDefault(c => c.ElementId == processId);
        if (keyCheckedElement != null)
        {
            ProcessParametersCheckBox.TryGetValue(keyCheckedElement, out List<CheckedElementDto> list);

            var elem = list.FirstOrDefault(c => c.ElementId == paramId);
            if (elem != null)
            {
                elem.IsChecked = elem.IsChecked != true;
            }
           
        }
    }
    

    private void UpdateDescr(string currentLabel)
    {
        if (string.IsNullOrEmpty(currentLabel))
        {
            CurrentLanguageLabel = LanguageAcronyms.Rus.ToString();
        }
        else
        {
            CurrentLanguageLabel = currentLabel;
        }
        
        foreach (var process in ProcessParametersCheckBox.Keys)
        {
            var descriptions = ProcessDescriptions.FirstOrDefault(c => c.ProcessId == process.ElementId);
            if(descriptions == null) 
            {process.CurrentDescr = String.Empty;}
            else if (descriptions != null && CurrentLanguageLabel == LanguageAcronyms.Rus.ToString())
            {process.CurrentDescr = descriptions.RusDescription;}
            else if (descriptions != null && CurrentLanguageLabel == LanguageAcronyms.Ukr.ToString())
            {process.CurrentDescr = descriptions.UkrDescription;}

            if (ProcessParametersCheckBox.TryGetValue(process, out List<CheckedElementDto> elements))
            {
                foreach (var parameter in elements)
                {
                   var elemDescr = ParameterDescriptions.FirstOrDefault(c => c.ParameterId == parameter.ElementId);
                    if(elemDescr == null) 
                    {parameter.CurrentDescr = String.Empty;}
                    else if (elemDescr != null && CurrentLanguageLabel == LanguageAcronyms.Rus.ToString())
                    {parameter.CurrentDescr = elemDescr.RusDescription;}
                    else if (elemDescr != null && CurrentLanguageLabel == LanguageAcronyms.Ukr.ToString())
                    {parameter.CurrentDescr = elemDescr.UkrDescription;}
                }
            }
        }
       
    }

    private async Task MakeReport()
    {
        var reportData = new ProcessParametersReportDataInfo();

        reportData.ProjectId = ProjectId;
        reportData.StartDateTime = (DateTime)StartReportDate;
        reportData.EndDateTime = (DateTime)EndReportDate;
        if(CurrentLanguageLabel == LanguageAcronyms.Ukr.ToString())
        {
            reportData.LanguageAcronymInt = (int)LanguageAcronyms.Ukr;
        }
        else
        {
            reportData.LanguageAcronymInt = (int)LanguageAcronyms.Rus;
        }

        foreach (var process in ProcessParametersCheckBox.Keys)
        {
            var procParam = new ProcessParametersResponseDto();
            var proc = new ProcessWithDescriptionsDto();
            proc.Id = process.ElementId;
            proc.ExternalId = process.ElementExternalId;
            proc.IsEnabled = true;
            proc.ProjectId = ProjectId;

            procParam.Process = proc;
            if (ProcessParametersCheckBox.TryGetValue(process, out List<CheckedElementDto> list))
            {
                var paramList = new List<ParametersWithDescriptions>();
                foreach (var param in list)
                {
                    if (param.IsChecked)
                    {
                        paramList.Add(new ParametersWithDescriptions(){ExternalId = param.ElementExternalId,Id = param.ElementId, IsEnabled = true});
                    }
                }

                procParam.Parameters = paramList;
            }
            
            reportData.ProcessParameters.Add(procParam);
        }

        var reportResult = await ParameterReportService.GetReport(reportData);
        
        var fileName = $"{ProjectDescription} - Отчет по параметрам {StartReportDate} - {EndReportDate}.xlsx";

        await _jsRuntime.InvokeAsync<object>("SaveAsFile", fileName, Convert.ToBase64String(reportResult));
        
    }


}