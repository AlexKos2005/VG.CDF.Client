@using VG.CDF.Client.Application.Dto
@using VG.CDF.Client.Application.Interfaces.Services
@using VG.CDF.Client.Application.ParameterDescriptions.Queries
@using VG.CDF.Client.Application.Parameters.Queries
@using VG.CDF.Client.Application.ProcessDescriptions.Commands
@using VG.CDF.Client.Application.ProcessDescriptions.Queries
@using VG.CDF.Client.Application.Processes.Commands
@using VG.CDF.Client.Application.Processes.Queries
@using VG.CDF.Client.Infrastructure.Services.RestApi.Admin
@using VG.CDF.Client.Pages.Administration.Parameter
@using VG.CDF.Client.Application.Companies.Queries
@using VG.CDF.Client.Application.Projects.Queries
@inject IProcessService ProcessService
@inject IProjectService ProjectService
@inject ICompanyService CompanyService
@inject IParameterService ParameterService
@inject IParameterGroupService ParameterGroupService
@inject IParameterDescriptionService ParameterDescriptionService
@inject IModalService Modal


<MudTable Striped="true" Bordered="true" Items="@Processes"
          Dense="@dense"
          Hover="@hover">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Процессы</MudText>
        <MudSpacer/>
        <MudIconButton Icon="fa-solid fa-plus" Color="MudBlazor.Color.Primary" @onclick="@AddProcess" Title="Добавить">Добавить процесс</MudIconButton>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 50px"/>
        <col style="width: 150px"/>
        <col style="width: 150px"/>
        <col style="width: 150px"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>
            Внешний ИД
        </MudTh>
        <MudTh>
            Название RU
        </MudTh>
        <MudTh>
            Название Ukr
        </MudTh>
        <MudTh>
            Действия
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="name">@context.ExternalId</MudTd>
         <MudTd DataLabel="RU">
             @ProcessDescriptions.FirstOrDefault(c => c.ProcessId == @context.Id)?.RusDescription
             </MudTd>
        <MudTd DataLabel="Ukr">
            @ProcessDescriptions.FirstOrDefault(c => c.ProcessId == @context.Id)?.UkrDescription
            </MudTd>
        <MudTd>
            <MudIconButton Icon=@Icons.Material.Outlined.Edit Color="MudBlazor.Color.Primary" @onclick="@(e=>EditProcess(@context))" Title="Изменить"></MudIconButton>
             <MudIconButton Icon=@Icons.Material.Outlined.Delete Color="MudBlazor.Color.Error" @onclick="@(e=>DeleteProcess(@context))" Title="Удалить"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>


@code
{
    private bool dense = false;
    private bool hover = true;
    
    public CompanyDto Company { get; set; }
    public ProjectDto Project { get; set; }
    public IEnumerable<ProcessDto> Processes { get; set; } = new List<ProcessDto>();
    public IEnumerable<ParameterDto> AllParameters { get; set; } = new List<ParameterDto>();
    public IEnumerable<ParameterDto> ProcessParameters { get; set; } = new List<ParameterDto>();
    public IEnumerable<ProcessDescriptionDto> ProcessDescriptions { get; set; } = new List<ProcessDescriptionDto>();
    public IEnumerable<ParameterDescriptionDto> ParameterDescriptions { get; set; } = new List<ParameterDescriptionDto>();
    

    [Parameter] public Guid ProjectId { get; set; }
    [Parameter] public Guid ProcessId { get; set; }
    [Parameter] public Guid CompanyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateViewModels();
    }

    private async Task AddProcess()
    {
        var parameters = new ModalParameters().Add("ProjectId", ProjectId);
        var modal = Modal.Show<AddProcessModal>("Создать",parameters);
        var modalResult = await modal.Result;

        if (modalResult.Confirmed)
        {
            var process =(ProcessDto)(modalResult.Data);
            var command = new CreateProcessCommand()
            {
                ProjectId = process.ProjectId,
                ExternalId = process.ExternalId,
            };

            await ProcessService.Create<CreateProcessCommand>(command);

        }
        
        modal.Close(modalResult);
        await UpdateViewModels();
    }
    
    private async Task EditProcess(ProcessDto process)
    {
        var parameters = new ModalParameters().Add("Process", process);
        var modal = Modal.Show<EditProcessModal>("Изменить",parameters);
        var modalResult = await modal.Result;

        if (modalResult.Confirmed)
        {
            var processByDescriptions =(ProcessByDescriptionsDto)(modalResult.Data);
            var processCommand = new UpdateProcessCommand()
            {
                Id = process.Id,
                ExternalId = process.ExternalId,
                ProjectId = process.ProjectId,
                DeviceCode = process.DeviceCode,
                DeviceIp = process.DeviceIp,
            };

            await ProcessService.Update<UpdateProcessCommand>(processCommand);

            if (ProcessDescriptions.FirstOrDefault(c => c.ProcessId == processByDescriptions.ProjectId) == null)
            {
                var descriptionCommand = new CreateProcessDescriptionCommand()
                {
                    RusDescription = processByDescriptions.RusDescription,
                    UkrDescription = processByDescriptions.UkrDescription,
                    ProcessId = processByDescriptions.ProcessId
                };

                await ProcessDescriptionService.Create<CreateProcessDescriptionCommand>(descriptionCommand);
            }
            else
            {
                var descriptionCommand = new UpdateProcessDescriptionCommand()
                {
                    RusDescription = processByDescriptions.RusDescription,
                    UkrDescription = processByDescriptions.UkrDescription,
                    ProcessId = processByDescriptions.ProcessId,
                    Id = ProcessDescriptions.First(c => c.ProcessId == processByDescriptions.ProcessId).Id
                };

                await ProcessDescriptionService.Update<UpdateProcessDescriptionCommand>(descriptionCommand);
            }
        }
        
        modal.Close(modalResult);
        await UpdateViewModels();

    }

    
    private async Task DeleteProcess(ProcessDto process)
    {
        var parameters = new ModalParameters().Add("Process", process);
        var modal = Modal.Show<DeleteProcessModal>("Удалить",parameters);
        var modalResult = await modal.Result;

        if (modalResult.Confirmed)
        {
            await ProcessService.Delete<string>(process.Id.ToString());
        }
        
        modal.Close(modalResult);
        await UpdateViewModels();
    }
    
    
    private async Task UpdateViewModels()
    {
        var projects = await ProjectService.GetList<GetProjectsListQuery>(new GetProjectsListQuery() { Id = ProjectId });
        Project = projects.First();
        var company = await CompanyService.GetList<GetCompaniesListQuery>(new GetCompaniesListQuery() { Id = Project.CompanyId });
        Company = company.First();
        AllParameters = await ParameterService.GetList<GetParametersListQuery>(new GetParametersListQuery() { CompanyId = Company.Id });
        AllParameters = AllParameters.OrderBy(c => c.ExternalId);
        
        ParameterDescriptions = await ParameterDescriptionService.GetList<GetParameterDescriptionsListQuery>(
            new GetParameterDescriptionsListQuery() { CompanyId = Company.Id });
        
        ProcessParameters = await ParameterService.GetList<GetParametersListQuery>(new GetParametersListQuery() { ProcessId = ProcessId});
        ProcessParameters = ProcessParameters.OrderBy(c => c.ExternalId);
;
    }

}