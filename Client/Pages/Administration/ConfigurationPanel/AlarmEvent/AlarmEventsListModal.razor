@page "/alarmevents/{companyid:guid}"

@using VG.CDF.Client.Infrastructure.Services.RestApi.Admin
@using VG.CDF.Client.Application.Dto
@using VG.CDF.Client.Application.Interfaces.Services
@using VG.CDF.Client.Application.Languages.Queries
@using VG.CDF.Client.Application.ParameterDescriptions.Commands
@using VG.CDF.Client.Application.ParameterDescriptions.Queries
@using VG.CDF.Client.Application.Parameters.Commands
@using VG.CDF.Client.Application.Parameters.Queries
@using VG.CDF.Client.Application.AlarmEvents.Queries
@using VG.CDF.Client.Application.AlarmEventDescriptions.Queries
@using VG.CDF.Client.Application.AlarmEvents.Commands
@using VG.CDF.Client.Application.AlarmEventDescriptions.Commands
@inject IAlarmEventService AlarmEventService
@inject IAlarmEventDescriptionService AlarmEventDescriptionService
@inject IModalService Modal


<MudTable Striped="true" Bordered="true" Items="@AlarmEvents"
          Dense="@dense"
          Hover="@hover">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Аварийные события</MudText>
        <MudSpacer/>
        <MudIconButton Icon="fa-solid fa-plus" Color="MudBlazor.Color.Primary" @onclick="@AddAlarmEvent" Title="Добавить">Добавить параметр</MudIconButton>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 50px"/>
        <col style="width: 150px"/>
        <col style="width: 150px"/>
        <col style="width: 150px"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>
            Внешний ИД
        </MudTh>
        <MudTh>
            Название RU
        </MudTh>
        <MudTh>
            Название Ukr
        </MudTh>
        <MudTh>
            Действия
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="name">@context.ExternalId</MudTd>
         <MudTd DataLabel="RU">
             @AlarmEventDescriptions.FirstOrDefault(c => c.AlarmEventId == @context.Id)?.RusDescription
             </MudTd>
        <MudTd DataLabel="Ukr">
            @AlarmEventDescriptions.FirstOrDefault(c => c.AlarmEventId == @context.Id)?.UkrDescription
            </MudTd>
        <MudTd>
            <MudIconButton Icon=@Icons.Material.Outlined.Edit Color="MudBlazor.Color.Primary" @onclick="@(e=>EditAlarmEvent(@context))" Title="Изменить"></MudIconButton>
             <MudIconButton Icon=@Icons.Material.Outlined.Delete Color="MudBlazor.Color.Error" @onclick="@(e=>DeleteAlarmEvent(@context))" Title="Удалить"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>


@code
{
    private bool dense = false;
    private bool hover = true;
    
    public IEnumerable<AlarmEventDto> AlarmEvents { get; set; } = new List<AlarmEventDto>();
    public IEnumerable<AlarmEventDescriptionDto> AlarmEventDescriptions { get; set; } = new List<AlarmEventDescriptionDto>();
    

    [Parameter] public Guid CompanyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateViewModels();
    }

    private async Task AddAlarmEvent()
    {
        int suggestExtId = 1;

        if (AlarmEvents.Any())
        {
            suggestExtId = AlarmEvents.Select(c => c.ExternalId).MaxBy(c => c) + 1;
        }
        
        var command = new CreateAlarmEventCommand()
        {
            CompanyId = CompanyId,
            ExternalId = suggestExtId,
        };
        
        await AlarmEventService.Create<CreateAlarmEventCommand>(command);
        
        // var parameters = new ModalParameters().Add("CompanyId", CompanyId);
        // var modal = Modal.Show<AddAlarmEventModal>("Создать",parameters);
        // var modalResult = await modal.Result;
        //
        // if (modalResult.Confirmed)
        // {
        //     var parameter =(AlarmEventDto)(modalResult.Data);
        //     var command = new CreateAlarmEventCommand()
        //     {
        //         CompanyId = CompanyId,
        //         ExternalId = parameter.ExternalId,
        //     };
        //
        //     await AlarmEventService.Create<CreateAlarmEventCommand>(command);
        //
        // }
        //
        // modal.Close(modalResult);

        await UpdateViewModels();
    }
    
    private async Task EditAlarmEvent(AlarmEventDto parameter)
    {
        var parameters = new ModalParameters().Add("AlarmEvent", parameter);
        var modal = Modal.Show<EditAlarmEventModal>("Изменить",parameters);
        var modalResult = await modal.Result;

        if (modalResult.Confirmed)
        {
            var alarmEventByDescriptions =(AlarmEventByDescriptionsDto)(modalResult.Data);
            var alarmEventCommand = new UpdateAlarmEventCommand()
            {
                Id = parameter.Id,
                CompanyId = CompanyId,
                ExternalId = alarmEventByDescriptions.ExternalId,
            };

            await AlarmEventService.Update<UpdateAlarmEventCommand>(alarmEventCommand);

            if (AlarmEventDescriptions.FirstOrDefault(c => c.AlarmEventId == alarmEventByDescriptions.AlarmEventId) == null)
            {
                var descriptionCommand = new CreateAlarmEventDescriptionCommand()
                {
                    RusDescription = alarmEventByDescriptions.RusDescription,
                    UkrDescription = alarmEventByDescriptions.UkrDescription,
                    AlarmEventId = alarmEventByDescriptions.AlarmEventId
                };

                await AlarmEventDescriptionService.Create<CreateAlarmEventDescriptionCommand>(descriptionCommand);
            }
            else
            {
                var descriptionCommand = new UpdateAlarmEventDescriptionCommand()
                {
                    RusDescription = alarmEventByDescriptions.RusDescription,
                    UkrDescription = alarmEventByDescriptions.UkrDescription,
                    AlarmEventId = alarmEventByDescriptions.AlarmEventId,
                    Id = AlarmEventDescriptions.First(c => c.AlarmEventId == alarmEventByDescriptions.AlarmEventId).Id
                };

                await AlarmEventDescriptionService.Update<UpdateAlarmEventDescriptionCommand>(descriptionCommand);
            }
           

        }
        
        modal.Close(modalResult);
        await UpdateViewModels();

    }

    
    private async Task DeleteAlarmEvent(AlarmEventDto parameter)
    {
        var parameters = new ModalParameters().Add("AlarmEvent", parameter);
        var modal = Modal.Show<DeleteAlarmEventModal>("Удалить",parameters);
        var modalResult = await modal.Result;

        if (modalResult.Confirmed)
        {
            await AlarmEventService.Delete<string>(parameter.Id.ToString());
        }
        
        modal.Close(modalResult);
        await UpdateViewModels();
    }


    private async Task UpdateViewModels()
    {
        AlarmEvents = await AlarmEventService.GetList<GetAlarmEventsListQuery>(new GetAlarmEventsListQuery() { CompanyId = CompanyId });
        AlarmEvents = AlarmEvents.OrderBy(c => c.ExternalId);
        
        AlarmEventDescriptions = await AlarmEventDescriptionService.GetList<GetAlarmEventDescriptionsListQuery>(
            new GetAlarmEventDescriptionsListQuery() { CompanyId = CompanyId });
    }

}